学习 git and github

1、 安装完成后，在开始菜单里面找到 “Git –> Git Bash”, 会弹出一个类似的命令窗口的东西，就说明Git安装成功。
  git config –-list  检查已有的配置信息。
  git config –-global user.name "liaodehe"
  git config –-global user.email "liaodehe@163.com"

2. 创建版本库。
什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，
以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
创建并进去如下文件夹：C:\liaodehe\MyProjects\for_github\git_test_1_create_repository
  git init 把这个目录变成git可以管理的仓库

首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，
但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，
也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。

在git_test_1_create_repository目录下新建一个记事本文件 readme.txt 
  git add readme.txt 添加到暂存区里面去。如果和上面一样，没有任何提示，说明已经添加成功了。
  git commit  -m "-m后面就是要添加的注释" 命令Git，把文件提交到仓库。 -m "-m后面就是要添加的注释"
  git diff readme.txt 
  git log 命令显示从最近到最远的显示日志
  git log –pretty=oneline 如果嫌上面显示的信息太多的话，可以使用此命令
  
  git reset –hard HEAD^ 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，
第一种是：git reset  –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。
那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset  –hard HEAD~100 即可。
  git reflog 查看操作记录
  git reset –hard 6fcfc89 本地更新/回退到某个版本
  
3. 理解工作区与暂存区的区别？
  工作区： 就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
  版本库(Repository)： 工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，
  还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
我们前面说过使用Git提交文件到版本库有两步：
  第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
  第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
 
4. Git撤销修改和删除文件操作。
  git checkout –- file1 file2... 可以丢弃工作区的修改
注意：命令git checkout –- readme.txt 中的 –- 很重要··，如果没有 –- 的话，那么命令变成创建分支了。 
删除的文件，只要还没有commit, 就可以通过 checkout 恢复
  
5.远程仓库。
在了解之前，先注册github账号，由于本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：
第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件
（可以通过如下命令查看：ls -al ~/.ssh），如果没有的话，打开命令行，输入如下命令：ssh-keygen -t rsa -b 4096 -C "rivernash@163.com"
  
在GitHub上创建一个仓库git_test_1_create_repository，这个仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，
也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
根据GitHub的提示，在本地的testgit仓库下运行命令：
  git remote add origin https://github.com/Funtional/git_test_1_create_repository.git 添加远程仓库 （origin：元仓库）
  git push -u origin master 把本地仓库master分支内容推送到远程仓库origin
由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了。
  git push origin master 把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。
  
6. 克隆
  git clone https://github.com/Funtional/Dress
  
7. 创建与合并分支。
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，
即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
首先，我们来创建dev分支，然后切换到dev分支上。如下操作：
  git checkout -b dev 命令加上–b参数表示创建并切换，相当于2条命令 git branch dev 和 git checkout dev
  git branch 查看当前分支
  
修改文件后，体检到dev分支，下面会用于merge到master分支
  git merge dev 在master分支上执行此命令，把dev分支上的内容合并到分支master上了
执行merge命令的输出为：
  $ git merge dev
  Updating d0dd4ac..47bc84a
  Fast-forward
  readme.txt | 3 ++-
  1 file changed, 2 insertions(+), 1 deletion(-)
注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

  git branch -d dev 合并完成后，可以删除dev分支
再创建一个分支fenzhi1，用于test解决冲突。fenzhi1先修改了readme.txt，然后add、commit；然后切换到master，修改readme.txt，然后add、commit，
此时，在master分支上merge分支fenzhi1的内容就会出现如下输入：
  $ git merge fenzhi1
  Auto-merging readme.txt
  CONFLICT (content): Merge conflict in readme.txt
  Automatic merge failed; fix conflicts and then commit the result.
可以使用git status查看当前状态如下：
  lenovo@LAPTOP-79HSVIUH MINGW64 /c/liaodehe/MyProjects/for_github/git_test_1_create_repository (master|MERGING)
  $ git status
  On branch master
  Your branch is ahead of 'origin/master' by 2 commits.
    (use "git push" to publish your local commits)

  You have unmerged paths.
    (fix conflicts and run "git commit")
    (use "git merge --abort" to abort the merge)

  Unmerged paths:
    (use "git add <file>..." to mark resolution)

        both modified:   readme.txt

  no changes added to commit (use "git add" and/or "git commit -a")
如上，可以看到分支从master变成了master|MERGING， 查看冲突的文件readme.txt可以看到如下冲突信息：
  <<<<<<< HEAD
  from branch master
  =======
  from branch fenzhi1
  >>>>>>> fenzhi1
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，其中<<<HEAD是指主分支修改的内容，>>>>>fenzhi1 是指fenzhi1上修改的内容。
在这种情况下，我们只能在当前分支master|MERGING手动修改本地readme.txt，然后add、commit ， 
按我理解commit 操作才是真正把fenzhi1上的内容merge到了master，可以再次使用 git log 命令查看分支合并的情况
  


